'use strict';

const express = require('express');
const bodyParser = require('body-parser');
const SmartApp = require('@smartthings/smartapp');

const server = module.exports = express();
server.use(bodyParser.json());
let XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;

require('dotenv').config();
const app = new SmartApp()


//Sends API request to Slack. 
function slackWebHook(device, callback){
    let data = {"text":"activity from " + device};
    const Http = new XMLHttpRequest();
    const url = "<webhook url>"; //Webhook Url generated by Slack app
    Http.open("POST", url, true);
    Http.setRequestHeader("Content-Type", "application/json");
    Http.onreadystatechange = function(){
        if(Http.status == 200 && Http.readyState == 4){
            if(typeof callback === "function"){
                callback.apply(Http);
            }
        }
    }
    Http.send(JSON.stringify(data));
}

/* Handles lifecycle events from SmartThings */
server.post('/', async (req, res) => {
    app.handleHttpCallback(req, res);
});

/* Defines the SmartApp */
app.enableEventLogging()
    .configureI18n()
    .page('mainPage', (context, page, configData) => {
        page.section('sensors', section => {
           section.deviceSetting('sensor').capabilities(['contactSensor']).required(true);
        });
        page.section('sensors2', section => {
            section.deviceSetting('sensor2').capabilities(['motionSensor']).required(false);
        })
        page.section('lights', section => {
            section.deviceSetting('lights').capabilities(['switch']).multiple(true).permissions('rx');
        });
    })
    .updated(async (context, updateData) => {
        await context.api.subscriptions.unsubscribeAll();
        return Promise.all([
            context.api.subscriptions.subscribeToDevices(context.config.sensor2, 'motionSensor', 'motion.active', 'motionActiveHandler'),
            context.api.subscriptions.subscribeToDevices(context.config.sensor, 'contactSensor', 'contact.open', 'openDeviceEventHandler'),
            context.api.subscriptions.subscribeToDevices(context.config.sensor, 'contactSensor', 'contact.closed', 'closedDeviceEventHandler')
        ])
    })
    .subscribedEventHandler('openDeviceEventHandler', (context, deviceEvent) => {
       return context.api.devices.sendCommands(context.config.lights, 'switch', 'off');
    })
    .subscribedEventHandler('closedDeviceEventHandler', async (context, deviceEvent) => {
        let devName = await context.api.devices.get(deviceEvent.deviceId);
        slackWebHook(devName.label, function(){});
        return context.api.devices.sendCommands(context.config.lights, 'switch', 'on');
    })  
    .subscribedEventHandler('motionActiveHandler', async(context, deviceEvent) => {
        let devName = await context.api.devices.get(deviceEvent.deviceId);
        slackWebHook(devName.label, function(){});

    })  

    
/* Sets the RSA public key for signature verification */
if (process.env.RSA_KEY) {
  app.publicKey(process.env.RSA_KEY)
}

/* Starts the server */
let port = process.env.PORT || 3000;
server.listen(port);
console.log(`Open: http://127.0.0.1:${port}`);

